# 计算A型细胞和B型细胞的数量 - 随机
num_A <- rpois(1, lambda1 * length * width)
num_B <- rpois(1, lambda2 * length * width)
# # 计算A型细胞和B型细胞的数量 - 固定
# num_A <- lambda1 * length * width
# num_B <- lambda2 * length * width
# 生成A型细胞和B型细胞的位置
df1 <- data.frame(x_pixel = runif(num_A, 0, length), y_pixel = runif(num_A, 0, width))
df2 <- data.frame(x_pixel = runif(num_B, 0, length), y_pixel = runif(num_B, 0, width))
# 为A型细胞生成NRN1值
df1$NRN1 <- log1p(pmax(
rnorm(num_A, mu1, std1),
0))
# df1$NRN1 <- log1p(pmax(
#   rnorm(num_A, mu1, std1),
#   0))
# 寻找每个B型细胞最近的A型细胞
nearest <- sapply(1:nrow(df2), function(i) {
distances <- sqrt((df2$x_pixel[i] - df1$x_pixel)^2 + (df2$y_pixel[i] - df1$y_pixel)^2)
which.min(distances)
})
df2$NN_ID <- nearest
df2$NN_x <- df1$x_pixel[nearest]
df2$NN_y <- df1$y_pixel[nearest]
df2$NN_NRN1 <- df1$NRN1[nearest]
# 计算NN_distance
df2$NN_distance <- sqrt((df2$x_pixel - df2$NN_x)^2 + (df2$y_pixel - df2$NN_y)^2)
# 生成epsilon值
if (sigma2_err == 0) {
df2$epsilon <- rep(mu_err, nrow(df2))
} else {
df2$epsilon <- rnorm(nrow(df2), mu_err, sqrt(sigma2_err))
}
# # 计算b2 - both 方案12适用
# b2 <- d * (a1 - a2) + b1
# # # 计算APOE值 - 方案1: NRN1 = a* APOE + b + error
# # df2$APOE <- ifelse(df2$NN_distance < d,
# #                    (df2$NN_NRN1 - b1 - df2$epsilon) / a1,
# #                    (df2$NN_NRN1 - df2$epsilon - b2) / a2)
# 计算APOE值 - 方案2: APOE = A * NRN1 + b + error
# df2$APOE <- ifelse(df2$NN_distance < d,
#                    df2$NN_NRN1 * a1 + b1 + df2$epsilon,
#                    df2$NN_NRN1 * a2 + b2 + df2$epsilon)
# 计算APOE值 - 方案3: APOE ~ N(mu2, std2)
# 计算APOE值 - 方案4: APOE ~ N(mu2, std2) - 简单版本
a = 2
b = 1.2
# mu_NRN1 = mean(df1$NRN1)
# df2$mu21 = a * mu_NRN1 + b
df2$mu21 = a * df2$NN_NRN1 + b
df2$std21 = 0.1
df2$mu22 = b
# df2$std22 = 1.83
df2$std22 = 1
df2$APOE <- mapply(function(NN_distance, mu21, mu22, std21, std22) {
if (NN_distance < d) {
return(rnorm(1, mu21, std21))  # 为每行生成一个随机数
} else {
return(sample(c(rnorm(1, mu22, std22), 0), 1))  # 为每行生成一个随机数
}
}, df2$NN_distance, df2$mu21, df2$mu22, df2$std21, df2$std22)
# 计算APOE值 - 去负值
df2$APOE <- pmax(0, df2$APOE)
# 返回两个dataframe
return(list(df1 = df1, df2 = df2))
}
# 运行模拟
results <- simulate(length = 2000,
width = 2000,
lambda1 = 0.0004,
lambda2 = 0.0001,
mu1 = 4.18,
std1 = 4.06,
d = 25,
a1 = 0.1,
b1 = 1.70,
a2 = 0.01,
b2=2.07,
mu_err = 0.1,
sigma2_err = 0.01)
df1 <- results$df1
df2 <- results$df2
# 使用基础R的hist()绘制直方图
hist(df1$NRN1, breaks=50, main="Distribution of NRN1",
xlab="NRN1 Values", col="skyblue", border="black")
# 使用基础R的hist()绘制直方图
hist(expm1(df1$NRN1), breaks=50, main="Distribution of NRN1",
xlab="NRN1 Values", col="skyblue", border="black")
library(ggplot2)
ggplot(df1, aes(x=NRN1)) +
geom_histogram(bins=50, fill="skyblue", color="black") +
labs(title="Distribution of NRN1", x="NRN1 Values", y="Count")
ggplot(expm1(df1), aes(x=NRN1)) +
geom_histogram(bins=50, fill="skyblue", color="black") +
labs(title="Distribution of NRN1", x="NRN1 Values", y="Count")
library(ggplot2)
ggplot(df2, aes(x=NN_distance)) +
geom_histogram(bins=50, fill="skyblue", color="black") +
labs(title="Distribution of distance", x="Distance from an Astrocyte to Nearest Neuron Values", y="Count")
library(ggplot2)
ggplot(expm1(df2), aes(x=APOE)) +
geom_histogram(bins=50, fill="skyblue", color="black") +
labs(title="Distribution of exp(GPX4)-1", x="GPX4 Values", y="Count")
ggplot(df2, aes(x=APOE)) +
geom_histogram(bins=50, fill="skyblue", color="black") +
labs(title="Simulated Distribution of Apoe", x="Apoe Values", y="Count")
# 如果尚未安装，请先安装所需的包
# install.packages("ggplot2")
# install.packages("ggnewscale")
# 加载必要的库
library(ggplot2)
library(ggnewscale)
# 假设您的数据框是 df1 和 df2
# 使用 ggplot2 开始绘图
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1)) +
scale_color_gradient(low = "white", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE)) +
scale_color_gradient(low = "white", high = "red", name = "Astocyte APOE") +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1)) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
# 假设您的数据框是 df1 和 df2
# 使用 ggplot2 开始绘图
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1080, 1130), ylim = c(200, 400)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1700, 1900), ylim = c(400, 500)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1800, 1900), ylim = c(400, 500)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1850, 1950), ylim = c(400, 500)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1850, 1950), ylim = c(400, 600)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1850, 1950), ylim = c(400, 530)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(1850, 1930), ylim = c(400, 530)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), size=20) +
scale_color_gradient(low = "white", high = "forestgreen", name = "Astocyte APOE") +
# 添加新的填充刻度
new_scale_fill() +
# 绘制 df1 的点，添加极细的轮廓
geom_point(
data = df1,
aes(x = x_pixel, y = y_pixel, fill = NRN1),
shape = 21,       # 使用有边框和填充的圆形
color = "lightgrey",  # 边框颜色
stroke = 0.01,      # 边框粗细
size=20
) +
scale_fill_gradient(low = "white", high = "red", name = "Neuron NRN1") +
coord_cartesian(xlim = c(700, 800), ylim = c(100, 200)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X", y = "Y") +
# 美化主题（可选）
theme_minimal()
1080
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(700, 800), ylim = c(100, 200)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(700, 800), ylim = c(80, 160)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
ggplot() +
# 绘制 df1 的点，并根据 NRN1 进行着色，从白色到红色
geom_point(data = df1, aes(x = x_pixel, y = y_pixel, color = NRN1), size=20) +
scale_color_gradient(low = "lightgrey", high = "forestgreen", name = "Neuron NRN1") +
# 添加新的颜色刻度
new_scale_color() +
# 绘制 df2 的点，并根据 APOE 进行着色，从白色到绿色
geom_point(data = df2, aes(x = x_pixel, y = y_pixel, color = APOE), shape=17, size=20) +
scale_color_gradient(low = "lightgrey", high = "magenta", name = "Astocyte APOE") +
coord_cartesian(xlim = c(680, 790), ylim = c(80, 160)) +
# 添加标题和标签（可选）
labs(title = "Spatial Distribution of Simulated Neurons and Astrocytes", x = "X (um)", y = "Y (um)") +
# 美化主题（可选）
theme_minimal()
here::i_am("proj.Rmd")
library(dplyr)
library(tidyr)
library(survival)
library(ggplot2)
# df_read = readxl::read_xlsx("Data/Raw/Data Collection Sheet - Updated.xlsx",
df_read = readxl::read_xlsx("Data/Raw/Data Collection Sheet - Updated_1122.xlsx",
sheet=1,
skip=1)   # 第一行备注跳过
# # deal with " " spaces and pseudo-spaces (row 203 and potential other spaces)
# df = df %>%
#    mutate(across(where(is.character), ~ifelse(grep("\u00A0", .), NA, .))) %>%
#    mutate(across(where(is.character), ~ifelse(grep(" ", .), NA, .)))
df_read %>%
rename(Name = `NAME > to be deleted when done with data collection`,
AdmDate = AdmissionDate,
DiscDate = `Discharge date`,
ICUAdmin = `ICU admission date`,
ICUDays = `Days in the ICU`,
AdmLoc = `Admission location\r\n(0=SNF, 1=LTAC, 2=Home, 3=other)`,
DiscStatus = `Discharge status \r\n(0=death/hospice, 1=LTAC, 2=SNF, 3=Home, 4= AR, 5=other)`,
Weight = `Weight (kg)`,
BMI = `BMI (kg/m^2)`,
Race = `Race\r\n(0=black, 1=white, 2=hispanic/latino, 3=other, 4=unknown)`,
SampleType = `Sample Type`,
CollectionUnit = `Collection Unit`,
CollectionDate = `CollectionDate`,
BloodcxPosDate = `(BLOOD cx only)\r\n\r\ndate/time of pos cx`,
BloodcxNegDate = `(BLOOD cx only)\r\n\r\ndate/time of neg cx`,
Pathogenic = `Pathogenic sample\r\n(0=no, 1=yes)`,
NumAnaSites = `Number of anatomic sites with isolation`,
Treatment = `Treatment\r\nAnidulafungin =1\r\nAmpho = 2\r\nIsavu = 3\r\nVori = 4\r\nFluconazole = 5`,
TrtDuration = `Treatment duration (days)`,
Included = `Exlcuded = 0\r\nIncluded = 1`,
HIV = `HIV\r\n(0=no, 1=yes)`,
ImmuSupr = `Iatrogenic immunosuppression\r\n(0=no, 1=yes)`,
AdmTo1stPathoTime = `Time from hospital admission to 1st pathogenic culture (days)`,
HospUnit = `Hospital unit at time of postive culture \r\n(0=ICU, 1=Step-down, 2=Med/Surg, 3= ECC)`,
SpICU = `Specific ICU \r\n(0=MICU, 1=SICU, 2=CVICU, 3=NICU, 4=BICU)`,
ICUTo1stPathoTime = `Time from ICU admission to 1st pathogenic culture (days)`,
PersCandi = `\r\n\r\nUse to identify sub-group analysis:\r\n\r\nPersistent Candidemia\r\n(0=no, 1=yes)`,
TPN = `TPN use prior to isolation\r\n(0=no, 1=yes)`,
CVC = `CVC at time of isolation or within 72 hours of removal\r\n(0=no, 1=yes)`,
MV = `MV during hospitalization\r\n(0=no, 1=yes)`,
AbdSurgery = `Recent abdominal surgery within 30 days \r\n(0=no, 1=yes)`,
BurnReqHosp = `Burn requiring hospitalization within 30 days \r\n(0=no, 1=yes)`,
PrevAbx = `Previous use of systemic abx within hospital admission or 30 days \r\n(0=no, 1=yes)`,
PrevAntif = `Previous use of systemic antifungals within hospital admission or 30 days \r\n(0=no, 1=yes)`,
AntifType = `Class of antifungals utilized \r\n(0=azole, 1=echinocandin, 2=polyenes)`,
CCI = `Total CCI Score`
) %>%
mutate(
ICUAdmin = ifelse(substr(ICUAdmin, 3, 3) != "/",
as.character(format( as.Date("1899-12-30") + as.numeric(ICUAdmin) , "%m/%d/%y")),
ICUAdmin ) ,
DiscDate = ifelse(substr(DiscDate, 3, 3) != "/",
as.character(format( as.Date("1899-12-30") + as.numeric(DiscDate) , "%m/%d/%y")),
DiscDate ) ,
CollectionDate = ifelse(substr(CollectionDate, 3, 3) != "/",
as.character(format( as.Date("1899-12-30") + as.numeric(CollectionDate) , "%m/%d/%y")),
CollectionDate ),
BloodcxPosDate = ifelse(substr(BloodcxPosDate, 3, 3) != "/",
as.character(format( as.Date("1899-12-30") + as.numeric(BloodcxPosDate) , "%m/%d/%y")),
BloodcxPosDate ) ,
BloodcxNegDate = ifelse(substr(BloodcxNegDate, 3, 3) != "/",
as.character(format( as.Date("1899-12-30") + as.numeric(BloodcxNegDate) , "%m/%d/%y")),
BloodcxNegDate )
)
df = df_read %>%
rename(Name = `NAME > to be deleted when done with data collection`,
AdmDate = AdmissionDate,
DiscDate = `Discharge date`,
ICUAdmin = `ICU admission date`,
ICUDays = `Days in the ICU`,
AdmLoc = `Admission location\r\n(0=SNF, 1=LTAC, 2=Home, 3=other)`,
DiscStatus = `Discharge status \r\n(0=death/hospice, 1=LTAC, 2=SNF, 3=Home, 4= AR, 5=other)`,
Weight = `Weight (kg)`,
BMI = `BMI (kg/m^2)`,
Race = `Race\r\n(0=black, 1=white, 2=hispanic/latino, 3=other, 4=unknown)`,
SampleType = `Sample Type`,
CollectionUnit = `Collection Unit`,
CollectionDate = `CollectionDate`,
BloodcxPosDate = `(BLOOD cx only)\r\n\r\ndate/time of pos cx`,
BloodcxNegDate = `(BLOOD cx only)\r\n\r\ndate/time of neg cx`,
Pathogenic = `Pathogenic sample\r\n(0=no, 1=yes)`,
NumAnaSites = `Number of anatomic sites with isolation`,
Treatment = `Treatment\r\nAnidulafungin =1\r\nAmpho = 2\r\nIsavu = 3\r\nVori = 4\r\nFluconazole = 5`,
TrtDuration = `Treatment duration (days)`,
Included = `Exlcuded = 0\r\nIncluded = 1`,
HIV = `HIV\r\n(0=no, 1=yes)`,
ImmuSupr = `Iatrogenic immunosuppression\r\n(0=no, 1=yes)`,
AdmTo1stPathoTime = `Time from hospital admission to 1st pathogenic culture (days)`,
HospUnit = `Hospital unit at time of postive culture \r\n(0=ICU, 1=Step-down, 2=Med/Surg, 3= ECC)`,
SpICU = `Specific ICU \r\n(0=MICU, 1=SICU, 2=CVICU, 3=NICU, 4=BICU)`,
ICUTo1stPathoTime = `Time from ICU admission to 1st pathogenic culture (days)`,
PersCandi = `\r\n\r\nUse to identify sub-group analysis:\r\n\r\nPersistent Candidemia\r\n(0=no, 1=yes)`,
TPN = `TPN use prior to isolation\r\n(0=no, 1=yes)`,
CVC = `CVC at time of isolation or within 72 hours of removal\r\n(0=no, 1=yes)`,
MV = `MV during hospitalization\r\n(0=no, 1=yes)`,
AbdSurgery = `Recent abdominal surgery within 30 days \r\n(0=no, 1=yes)`,
BurnReqHosp = `Burn requiring hospitalization within 30 days \r\n(0=no, 1=yes)`,
PrevAbx = `Previous use of systemic abx within hospital admission or 30 days \r\n(0=no, 1=yes)`,
PrevAntif = `Previous use of systemic antifungals within hospital admission or 30 days \r\n(0=no, 1=yes)`,
AntifType = `Class of antifungals utilized \r\n(0=azole, 1=echinocandin, 2=polyenes)`,
CCI = `Total CCI Score`
) %>%
mutate(
ICUAdmin = ifelse(substr(ICUAdmin, 3, 3) != "/",
as.character(format( as.Date("1899-12-30") + as.numeric(ICUAdmin) , "%m/%d/%y")),
ICUAdmin ) ,
DiscDate = ifelse(substr(DiscDate, 3, 3) != "/",
as.character(format( as.Date("1899-12-30") + as.numeric(DiscDate) , "%m/%d/%y")),
DiscDate ) ,
CollectionDate = ifelse(substr(CollectionDate, 3, 3) != "/",
as.character(format( as.Date("1899-12-30") + as.numeric(CollectionDate) , "%m/%d/%y")),
CollectionDate ),
BloodcxPosDate = ifelse(substr(BloodcxPosDate, 3, 3) != "/",
as.character(format( as.Date("1899-12-30") + as.numeric(BloodcxPosDate) , "%m/%d/%y")),
BloodcxPosDate ) ,
BloodcxNegDate = ifelse(substr(BloodcxNegDate, 3, 3) != "/",
as.character(format( as.Date("1899-12-30") + as.numeric(BloodcxNegDate) , "%m/%d/%y")),
BloodcxNegDate )
) %>%
mutate(
Antif_azole = ifelse(PrevAntif == 1 & AntifType == 0, 1,
ifelse(PrevAntif == 1, 0, ifelse(PrevAntif == 0, 0, NA))),
Antif_echi = ifelse(PrevAntif == 1 & AntifType == 1, 1,
ifelse(PrevAntif == 1, 0, ifelse(PrevAntif == 0, 0, NA))),
Antif_poly = ifelse(PrevAntif == 1 & AntifType == 2, 1,
ifelse(PrevAntif == 1, 0, ifelse(PrevAntif == 0, 0, NA)))
) %>%
# Sum up and Remove CCI Columns except "Total CCI"
mutate(CCI = rowSums(select(., grep("^Age ", names(df_read)):(grep("^Age ", names(df_read))+16)))) %>%
# select(-(grep("^Age ",names(df_read)):(grep("^Age ",names(df_read))+16)) ) %>%
rename_with(.fn = ~paste0("CCI", seq_along(.x)),
.cols = grep("^Age ", names(df_read)):(grep("^Age ", names(df_read)) + 16)) %>%
mutate(across(.cols = starts_with("CCI"), as.factor)) %>%
# Remove Comments column
select(-Comments) %>%
# select(MRN, Name, Admission) %>%
group_by(Name) %>%
group_by(AdmDate) %>%
fill(DiscDate,
ICUAdmin,
ICUDays,
AdmLoc,
DiscStatus,
Race,
Weight,
Included,
HIV,
ImmuSupr,
TPN,
CVC,
MV,
AbdSurgery,
BurnReqHosp,
PrevAbx,
PrevAntif,
AntifType,
CCI,
everything(),
.direction="updown") %>%
filter(Included == 1) %>%
mutate(Name=stringr::str_to_title(Name)) %>%
mutate(AdmDate = as.Date(AdmDate),
DiscDate = as.Date(strsplit(DiscDate," ")[[1]][1],format=ifelse(nchar(strsplit(DiscDate," ")[[1]][1]) == 8, "%m/%d/%y", "%m/%d/%Y")),
ICUAdmin = as.Date(strsplit(ICUAdmin," ")[[1]][1],format=
ifelse(is.na(ICUAdmin),
NA_character_,
ifelse(nchar(strsplit(ICUAdmin," ")[[1]][1]) == 8, "%m/%d/%y", "%m/%d/%Y")
)
),
CollectionDate = as.Date(substr(CollectionDate, 1, 8),format=ifelse(nchar(strsplit(CollectionDate," ")[[1]][1]) == 8, "%m/%d/%y", "%m/%d/%Y"))
) %>%
# arrange(Name) %>%
filter(Included == 1) %>%
select(-Included) %>%
# filter(n() > 1) %>%
ungroup() %>%
ungroup() %>%
rename()
df_distinct = df %>%
distinct(MRN, .keep_all=TRUE)
df_blood = df %>% filter(SampleType == "BLOOD")
df_blood_distinct = df_blood %>%
distinct(MRN, .keep_all = TRUE)
df_blood2 =
getwd()
setwd("D:/zls/Emory/Courses/2024 Fall/DATA 550/Practices/Practice11W12 - 1216/docker_r_auto_report_gen")
getwd()
.libPaths()
renv::init()
renv::activate()
.libPaths()
.libPaths()
.libPaths()
source("renv/activate.R")
ls
ls
ls()
.libPaths()
renv::status()
renv::status
renv::status()
ls
getwd()
setwd("D:/zls/Emory/Courses/2024 Fall/DATA 550/Assignments/FinalProject/CirrhosisSurvival_ClinicalTrial")
